"""
Django settings for seekadvice_project project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
import cloudinary
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SEEKADIVCE_SECRET_KEY']


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
#There should be a environment variable called local_sql_lite on your development machine
#Actually not needed as heroku just uses the default postgres database
if "local_sql_lite" in os.environ:  
    ALLOWED_HOSTS = ['*']

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    #In Development Env muss SSL Redirect aus sein
    SECURE_SSL_REDIRECT = False
    DEBUG = True

    #Development Email Server
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'    
else:
    ALLOWED_HOSTS = ['.open-source-advice.com']
    RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    if RENDER_EXTERNAL_HOSTNAME:
        ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
    SESSION_COOKIE_SAMESITE = None
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True    

    DATABASES = {}
    DATABASES['default'] = dj_database_url.config(conn_max_age=600)
    SECURE_SSL_REDIRECT = True
    DEBUG = False

    ANYMAIL = {
        "POSTMARK_SERVER_TOKEN": os.environ.get('postmark_server_token'),
    }
    EMAIL_BACKEND = "anymail.backends.postmark.EmailBackend"
    DEFAULT_FROM_EMAIL = "info@open-source-advice.com"  
    SERVER_EMAIL = "info@open-source-advice.com"


AUTH_USER_MODEL = "seekadvice_app.CustomUser" 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'seekadvice_app',
    'cloudinary',
    'social_django',
    'anymail'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'seekadvice_project.urls'

SECURE_REFERRER_POLICY = "same-origin"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'seekadvice_project.wsgi.application'



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'assets'),
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#add config 
cloudinary.config(
  cloud_name = "dqdamgdeq",
  api_key = os.environ['cloudinary_key'],
  api_secret = os.environ['cloudinary_api_secret'],
  secure = True
)

#Social
SOCIAL_AUTH_USER_MODEL = 'seekadvice_app.CustomUser'
SOCIAL_AUTH_JSONFIELD_ENABLED = True

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.google.GoogleOAuth2'
]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    # This is added additionaly
    'seekadvice_app.social_auth_extension.upload_picture'
)

LOGIN_URL = '/login'

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/seekadvice'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/registerintercept'
#Linkedinin
SOCIAL_AUTH_LOGIN_URL = '/login'
SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = os.environ['seekadvice_linkedin_clientid']      #Client ID
SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = os.environ['seekadvice_linkedin_clientsecret']  #Client Secret
SOCIAL_AUTH_LINKEDIN_OAUTH2_SCOPE = ['r_liteprofile', 'r_emailaddress']
SOCIAL_AUTH_LINKEDIN_OAUTH2_FIELD_SELECTORS = ['email-address', 'public-profile-url', 'picture-url', 'profilePicture']
SOCIAL_AUTH_LINKEDIN_OAUTH2_EXTRA_DATA = [
    ('id', 'id'),
    ('formattedName', 'name'),
    ('emailAddress', 'email_address'),
    ('profilePicture', 'profilePicture'),
    ('pictureUrl', 'picture_url'),
    ('publicProfileUrl', 'profile_url'),
]



#Github
SOCIAL_AUTH_GITHUB_KEY = os.environ['seekadvice_github_clientid']
SOCIAL_AUTH_GITHUB_SECRET = os.environ['seekadvice_github_clientsecret']
SOCIAL_AUTH_GITHUB_SCOPE=['read:user', 'user:email']

#Google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ['seekadvice_google_clientid']
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ['seekadvice_google_clientsecret']